# -*- coding: utf-8 -*-
"""
/***************************************************************************
 CloudOcclusionReportDialog
                                 A QGIS plugin
 Cloud Oclusion Report
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-06-12
        git sha              : $Format:%H$
        copyright            : (C) 2023 by CloudOcclusionReport
        email                : CloudOcclusionReport@email.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import html
from qgis.PyQt.QtCore import Qt
from qgis.PyQt.QtWidgets import QMessageBox, QHeaderView, QComboBox, QLineEdit

OM_MAP = {
    "1º CGEO": ("1º CENTRO DE GEOINFORMAÇÃO", "Porto Alegre - RS,"),
    "2º CGEO": ("2º CENTRO DE GEOINFORMAÇÃO", "Brasília - DF,"),
    "3º CGEO": ("3º CENTRO DE GEOINFORMAÇÃO", "Olinda - PE,"),
    "4º CGEO": ("4º CENTRO DE GEOINFORMAÇÃO", "Manaus - AM,"),
    "5º CGEO": ("5º CENTRO DE GEOINFORMAÇÃO", "Rio de Janeiro - RJ,")
}


def string_to_html_text(html_string):
    return html.escape(html_string, quote=False).encode("utf-8", "xmlcharrefreplace").decode("utf-8")


def get_om_name_and_location(string):
    return OM_MAP.get(string, ("error", None))


def get_html_data(evaluate_data):
    om_name, om_location = get_om_name_and_location(evaluate_data[0])

    context = {'product_type': string_to_html_text(evaluate_data[12]),
               'om_name': string_to_html_text(om_name),
               'doc_number': string_to_html_text(evaluate_data[1]),
               'block': string_to_html_text(evaluate_data[2]),
               'work_month': string_to_html_text(evaluate_data[3]),
               'work_year': string_to_html_text(evaluate_data[4]),
               'map_scale': string_to_html_text(evaluate_data[13]),
               'src': 'SIRGAS 2000 UTM 24S',
               'finish_project_date': string_to_html_text(evaluate_data[5]),
               'evaluation_result': string_to_html_text(evaluate_data[7]),
               'project_name': string_to_html_text(evaluate_data[11]),
               'conformity': string_to_html_text(evaluate_data[6]),
               'responsavel_tecnico': string_to_html_text(evaluate_data[9]),
               'avaliador': string_to_html_text(evaluate_data[8]),
               'local_and_time': string_to_html_text(om_location) + string_to_html_text(evaluate_data[10])
               }
    return context


def show_success_message_bar(message):
    msg = QMessageBox()
    msg.setWindowTitle("Cloud Occlusion Report")

    if 'error' in message:
        msg.setIcon(QMessageBox.Warning)
        msg.setText("An error occur!")
        msg.setInformativeText(message['error'])

        msg.setStandardButtons(QMessageBox.Ok)
    else:
        msg.setIcon(QMessageBox.Information)
        msg.setText(message['success'])

    msg.exec_()


def run_progress_bar(progress_bar, layer):
    counter = 0
    for feature in layer.getFeatures():
        counter += 1
        progress_bar.setValue(counter)
