# -*- coding: utf-8 -*-
"""
/***************************************************************************
 CloudOcclusionReportDialog
                                 A QGIS plugin
 Cloud Oclusion Report
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-06-12
        git sha              : $Format:%H$
        copyright            : (C) 2023 by CloudOcclusionReport
        email                : CloudOcclusionReport@email.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

NO_OCCLUSION = 'Não foram identificadas nuvens ou oclusões com área maior ou igual a 0,2 km².'
OCCLUSION = 'Foram identificadas nuvens ou oclusões com área maior ou igual a 0,2 km².'
NON_CONFORMING = 'Não Conforme'
CONFORMING = 'Conforme'


def filter_by_occlusion(layer, field, occlusion_param):
    nonconforming = []
    conforming = []
    analysis_dict = {}

    for feature in layer.getFeatures():
        group_attribute = feature['texto_edicao']
        occlusion_area = feature[field]
        if group_attribute in analysis_dict:
            analysis_dict[group_attribute].append(occlusion_area)
        else:
            analysis_dict[group_attribute] = [occlusion_area]

    for key in analysis_dict:
        if max(analysis_dict[key]) >= occlusion_param:
            nonconforming.append(key)
        else:
            conforming.append(key)

    return conforming, nonconforming


def get_occlusion_result(evaluation_layer, evaluation_field, occlusion_param, block_text):
    conforming, nonconforming = filter_by_occlusion(evaluation_layer, evaluation_field, occlusion_param)

    if block_text in nonconforming:
        return OCCLUSION, NON_CONFORMING
    else:
        return NO_OCCLUSION, CONFORMING
