# -*- coding: utf-8 -*-
"""
/***************************************************************************
 CloudOcclusionReportDialog
                                 A QGIS plugin
 Cloud Oclusion Report
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-06-12
        git sha              : $Format:%H$
        copyright            : (C) 2023 by CloudOcclusionReport
        email                : CloudOcclusionReport@email.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import html
import os
import pdfkit
from datetime import datetime
from jinja2 import Environment, PackageLoader, select_autoescape
from .util import show_success_message_bar

CSS_FILE = os.path.join(os.path.dirname(__file__), 'templates', 'my-style.css')
PDFKIT_CONFIG = pdfkit.configuration(wkhtmltopdf="C:/Program Files (x86)/wkhtmltopdf/bin/wkhtmltopdf.exe")


def get_report_name(report_number):
    today_date = datetime.today().strftime("%d %b %Y")
    return f"Relatorio Tecnico Nr {report_number} - {today_date}.pdf"


def get_jinja_context_text(context_dict):
    jinja_environment = Environment(loader=PackageLoader("cloud_oclusion_report", 'templates'),
                                    autoescape=select_autoescape())
    html_template = jinja_environment.get_template('basic-template.html')

    return html_template.render(context_dict)


def convert_text_to_pdf(context_dict, file_name, pdf_destination):
    try:
        file_name_path = os.path.join(pdf_destination, get_report_name(file_name))
        pdfkit.from_string(get_jinja_context_text(context_dict), file_name_path,
                           configuration=PDFKIT_CONFIG, css=CSS_FILE)

        show_success_message_bar({'success': f"{get_report_name(file_name)} created successfully at {pdf_destination}."})

    except Exception as e:
        show_success_message_bar({'error': f"Error creating PDF: {str(e)}"})
