# -*- coding: utf-8 -*-
"""
/***************************************************************************
 CloudOclusionReportDialog
                                 A QGIS plugin
 Cloud Oclusion Report
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-06-12
        git sha              : $Format:%H$
        copyright            : (C) 2023 by CloudOclusionReport
        email                : CloudOclusionReport@email.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import html
from datetime import datetime

import jinja2
import pdfkit


class ExportReportToPdf(list):
    def __init__(self, string_list) -> None:
        super().__init__()
        self.om_name = self.transformStringToHTMLtext(self.convertCGEOname(string_list[0]))
        self.doc_number = self.transformStringToHTMLtext(string_list[1])
        self.block = self.transformStringToHTMLtext(string_list[2])
        self.work_month = self.transformStringToHTMLtext(string_list[3])
        self.work_year = self.transformStringToHTMLtext(string_list[4])
        self.finish_project_date = self.transformStringToHTMLtext(string_list[5])
        self.conformity = self.transformStringToHTMLtext(string_list[6])
        self.evaluation_result = self.transformStringToHTMLtext(string_list[7])
        self.evaluation_person = self.transformStringToHTMLtext(string_list[8])
        self.manage_person = self.transformStringToHTMLtext(string_list[9])
        self.map_scale = '1:10.000'
        self.src = 'SIRGAS 2000 UTM 24S'
        self.product_type = 'Ortoimagem'
        self.doc_date = self.transformStringToHTMLtext(string_list[10])
        self.localAndTime = self.localDocument(string_list[0]) + self.doc_date

    def transformStringToHTMLtext(self, string):
        ans = ''
        binaryHTML = html.escape(string).encode("ascii", "xmlcharrefreplace")
        binaryHTML = str(binaryHTML)
        # Começa na posição 3 e termina em -1, pois a função .escape e .encode transformam no formato: b'TEXTO
        # CONVERTIDO'
        for i in range(2, len(binaryHTML) - 1):
            ans += binaryHTML[i]

        return ans

    def convertCGEOname(self, string):
        if string == "1º CGEO":
            return '1º CENTRO DE GEOINFORMAÇÃO'
        elif string == "2º CGEO":
            return '2º CENTRO DE GEOINFORMAÇÃO'
        elif string == "3º CGEO":
            return '3º CENTRO DE GEOINFORMAÇÃO'
        elif string == "4º CGEO":
            return '4º CENTRO DE GEOINFORMAÇÃO'
        elif string == "5º CGEO":
            return '5º CENTRO DE GEOINFORMAÇÃO'
        else:
            return 'error'

    def localDocument(self, string):

        if string == "1º CGEO":
            text = 'Porto Alegre - RS, '
            htmlName = self.transformStringToHTMLtext(text)
            return htmlName

        elif string == "2º CGEO":
            text = 'Brasília - DF, '
            htmlName = self.transformStringToHTMLtext(text)
            return htmlName

        elif string == "3º CGEO":
            text = 'Olinda - PE, '
            htmlName = self.transformStringToHTMLtext(text)
            return htmlName

        elif string == "4º CGEO":
            text = 'Manaus - AM, '
            htmlName = self.transformStringToHTMLtext(text)
            return htmlName

        elif string == "5º CGEO":
            text = 'Rio de Janeiro - RJ, '
            htmlName = self.transformStringToHTMLtext(text)
            return htmlName

        else:
            return 'error'

    def createPDF(self):
        # Aqui vamos passar como um dicionário as variáveis que são usadas no HTML
        project_name = self.transformStringToHTMLtext('Perícia PI/CE')

        context = {'product_type': self.product_type, 'om_name': self.om_name, 'doc_number': self.doc_number,
                   'block': self.block, 'work_month': self.work_month, 'work_year': self.work_year,
                   'map_scale': self.map_scale, 'src': self.src, 'finish_project_date': self.finish_project_date,
                   'evaluation_result': self.evaluation_result, 'project_name': project_name,
                   'conformity': self.conformity, 'responsavel_tecnico': self.manage_person,
                   'avaliador': self.evaluation_person, 'local_and_time': self.localAndTime}

        template_loader = jinja2.FileSystemLoader('./')
        template_env = jinja2.Environment(loader=template_loader)

        template = template_env.get_template("basic-templates.html")  # função que chama o modelo HTML pronto
        output_text = template.render(context)

        today_date = datetime.today().strftime("%d %b %Y")
        docNumberToFileName = self.doc_number.split('/')
        fileName = 'Relatorio Tecnico Nr ' + docNumberToFileName[0] + ' - ' + str(today_date) + '.pdf'

        config = pdfkit.configuration(wkhtmltopdf="C:/Program Files (x86)/wkhtmltopdf/bin/wkhtmltopdf.exe")
        pdfkit.from_string(output_text, fileName, configuration=config, css="my-style.css")
        print('PDF Gerado com sucesso')
